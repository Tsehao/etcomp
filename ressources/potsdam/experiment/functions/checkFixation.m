function fixated=checkFixation1(el, target);% checks for fixation of rect specified in target, which must be a single rect% el contains the eyetracking globals, set up by initeyelinkdefaults (or, here, initEyelink)% parameters:% 	el:		 	Eyelink globals% return value:%	fixated:	1 if rect was fixated, 0 otherwiseeye_used = el.eyetracked;     % +1 as we are accessing MATLAB arrayfixated=0;% while fixated<=0% Real-time GAZE display codeif Eyelink('isconnected') == el.dummyconnected    sample=1;else    sample=0;    t1=GetSecs;    while (GetSecs-t1<.1 & sample<1) % hier war t1-getsecs        sample=Eyelink( 'newfloatsampleavailable'); % eyelink_newest_float_sample(NULL) check for new sample update    endendif sample> 0    if Eyelink('isconnected') == el.dummyconnected        evt=[];        eye_used = 0;    else        evt = Eyelink( 'newestfloatsample'); % eyelink_newest_float_sample(&evt);  % get the sample */    end        if eye_used ~= -1   % do we know which eye yet? */        if Eyelink('isconnected') == el.dummyconnected            [x,y,button] = GetMouse(el.window); % get gaze position from mouse            pupil=1;        else            if eye_used ~= el.BINOCULAR                x = evt.gx(el.eyetracked+1);    % get gaze position from sample                y = evt.gy(el.eyetracked+1);    % +1 as we are accessing MATLAB array                pupil=evt.pa(el.eyetracked+1);            else                x = evt.gx;                y = evt.gy;                pupil=evt.pa;            end        end        if x~=el.MISSING_DATA & y~=el.MISSING_DATA & pupil>0  % pupil visible?            if x>target(1) & x<target(3) & y>target(2) & y<target(4)                fixated=1;                return;            else                fixated=0;            end        else            fixated=-2; %no x or y data        end % if x~=MISSING_DATA    end % eye_used== -1else % sample< 0    fixated=-1;end % sample> 0